package testers;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;


import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

public class Wybory {
	
	@Test
	public void testConnectionToDb() {
		try (Connection c = DriverManager.getConnection("jdbc:hsqldb:mem:mymemdb", "SA", "")){	 
		 } catch (SQLException e) {
			 Assertions.fail(e);
		 	}
		}
	
	@Test
	private void CreateTableOfCandidates(Statement s) throws SQLException {
		 s.execute("DROP TABLE IF EXISTS WYBORY");
		 s.execute("CREATE TABLE WYBORY (ID INT IDENTITY PRIMARY KEY,IMIE VARCHAR(225), NAZWISKO VARCHAR(225), WYNIK_1_TURA INT, WYNIK_2_TURA INT, WYGRANA INT)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('MICHAL', 'KOPARKA', 0 ,0 ,-1)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('KAROL', 'MOTYKA', 0 ,0 ,-1)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('EWA', 'BIELIK', 0 ,0 ,-1)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('KONDRAD', 'MICKIEWICZ', 0 ,0 ,-1)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('WIKTOR', 'STAL', 0 ,0 ,-1)");
		 
	}
	
	private void CreateTableOfCandidatesPoITurze(Statement s) throws SQLException {
		 s.execute("DROP TABLE IF EXISTS WYBORY");
		 s.execute("CREATE TABLE WYBORY (ID INT IDENTITY PRIMARY KEY,IMIE VARCHAR(225), NAZWISKO VARCHAR(225), WYNIK_1_TURA INT, WYNIK_2_TURA INT, WYGRANA INT)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('MICHAL', 'KOPARKA', 27 ,0 ,-1)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('KAROL', 'MOTYKA', 15 ,0 ,-1)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('EWA', 'BIELIK', 32 ,0 ,-1)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('KONDRAD', 'MICKIEWICZ', 23 ,0 ,-1)");
		 s.execute("INSERT INTO WYBORY (IMIE, NAZWISKO, WYNIK_1_TURA, WYNIK_2_TURA, WYGRANA) VALUES ('WIKTOR', 'STAL', 3 ,0 ,-1)");
		 
	}
	
	@Test
	public void testSymulacjaITury() {
		try (Connection c =  DriverManager.getConnection("jdbc:hsqldb:mem:mymemdb", "SA", "")){
			try (Statement s = c.createStatement()){
				CreateTableOfCandidates(s);	
			
				
				try (PreparedStatement ps = c.prepareStatement("UPDATE WYBORY SET WYNIK_1_TURA = ? WHERE IMIE = ?")){
					ps.setInt(1, 32);
					ps.setString(2,"EWA");
					ps.execute();
					ps.setInt(1, 3);
					ps.setString(2,"WIKTOR");
					ps.execute();
					ps.setInt(1, 15);
					ps.setString(2,"KAROL");
					ps.execute();
					ps.setInt(1, 27);
					ps.setString(2,"MICHAL");
					ps.execute();
					ps.setInt(1, 23);
					ps.setString(2,"KONDRAD");
					ps.execute();
					}
				ResultSet rs = s.executeQuery("SELECT * FROM WYBORY WHERE IMIE = 'KONDRAD'");
				rs.next();
				int x = rs.getInt("WYNIK_1_TURA");
				Assertions.assertEquals(23, x);
			}
		} catch (SQLException e) {
			Assertions.fail(e);
			}
		}
	
	@Test 
	public void testWygrani_I_tury() {
		try (Connection c =  DriverManager.getConnection("jdbc:hsqldb:mem:mymemdb", "SA", "")){
			try (Statement s = c.createStatement()){
				CreateTableOfCandidatesPoITurze(s);
				try(ResultSet rs = s.executeQuery("SELECT IMIE FROM WYBORY ORDER BY WYNIK_1_TURA DESC")){
				rs.next(); 
					String a = "EWA";
					Assertions.assertEquals(a, rs.getString("IMIE"));
				rs.next(); 
					String b = "MICHAL";
				
					Assertions.assertEquals(b, rs.getString("IMIE"));
				
					}
				
			}
		} catch (SQLException e) {
			Assertions.fail(e);
			}
	}
	
	@Test
	public void testSymulacja_2_tury() {
		try (Connection c =  DriverManager.getConnection("jdbc:hsqldb:mem:mymemdb", "SA", "")){
			try (Statement s = c.createStatement()){
				CreateTableOfCandidates(s);	
			
				c.setAutoCommit(false);
				try (PreparedStatement ps = c.prepareStatement("UPDATE WYBORY SET WYNIK_1_TURA = ? WHERE IMIE = ?")){
					ps.setInt(1, 44);
					ps.setString(2,"EWA");
					ps.execute();
					ps.setInt(1, 66);
					ps.setString(2,"MICHAL");
					ps.execute();
					
					}
				try(ResultSet rs = s.executeQuery("SELECT IMIE FROM WYBORY ORDER BY WYNIK_1_TURA DESC")){
					rs.next(); 
						String a = "MICHAL";
						Assertions.assertEquals(a, rs.getString("IMIE"));
					rs.next(); 
						String b = "EWA";
					
						Assertions.assertEquals(b, rs.getString("IMIE"));
					
						}
				c.rollback();
				try (PreparedStatement ps = c.prepareStatement("UPDATE WYBORY SET WYNIK_1_TURA = ? WHERE IMIE = ?")){
					ps.setInt(1, 66);
					ps.setString(2,"EWA");
					ps.execute();
					ps.setInt(1, 44);
					ps.setString(2,"MICHAL");
					ps.execute();
					ps.setInt(1, 0);
					ps.setString(2,"WIKTOR");
					ps.execute();
					ps.setInt(1, 0);
					ps.setString(2,"KAROL");
					ps.execute();
					ps.setInt(1, 0);
					ps.setString(2,"KONDRAD");
					ps.execute();
					}
				try (PreparedStatement ps = c.prepareStatement("UPDATE WYBORY SET WYGRANA = ? WHERE IMIE = ?")){
					ps.setInt(1, 1);
					ps.setString(2,"EWA");
					ps.execute();
					ps.setInt(1, 0);
					ps.setString(2,"WIKTOR");
					ps.execute();
					ps.setInt(1, 0);
					ps.setString(2,"KAROL");
					ps.execute();
					ps.setInt(1, 0);
					ps.setString(2,"MICHAL");
					ps.execute();
					ps.setInt(1, 0);
					ps.setString(2,"KONDRAD");
					ps.execute();
				}
				c.commit();
				try(ResultSet rs = s.executeQuery("SELECT * FROM WYBORY ORDER BY WYGRANA DESC")){
					rs.next(); 
						int a = 1;
						String b = "EWA";
							Assertions.assertEquals(a, rs.getInt("WYGRANA"));
							Assertions.assertEquals(b, rs.getString("IMIE"));
					rs.next();
					int d = 0;
					Assertions.assertEquals(d, rs.getInt("Wygrana"));
				}
			}
		} catch (SQLException e) {
			Assertions.fail(e);
			}
		}
}


	
	
	
	




